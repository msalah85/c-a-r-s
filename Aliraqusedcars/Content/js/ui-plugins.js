/*!
 * FitVids 1.0
 * Copyright 2011, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com
 * Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/
 * Released under the WTFPL license - http://sam.zoy.org/wtfpl/
 */
(function (a) {
    a.fn.fitVids = function (b) {
        var c = { customSelector: null }; var e = document.createElement("div"), d = document.getElementsByTagName("base")[0] || document.getElementsByTagName("script")[0];
        e.className = "fit-vids-style"; e.innerHTML = "&shy;<style>               .fluid-width-video-wrapper {                 width: 100%;                              position: relative;                       padding: 0;                            }                                                                                   .fluid-width-video-wrapper iframe,        .fluid-width-video-wrapper object,        .fluid-width-video-wrapper embed {           position: absolute;                       top: 0;                                   left: 0;                                  width: 100%;                              height: 100%;                          }                                       </style>";
        d.parentNode.insertBefore(e, d); if (b) { a.extend(c, b) } return this.each(function () {
            var f = ["iframe[src*='player.vimeo.com']", "iframe[src*='youtube.com']", "iframe[src*='youtube-nocookie.com']", "iframe[src*='kickstarter.com']", "object", "embed"]; if (c.customSelector) { f.push(c.customSelector) } var g = a(this).find(f.join(",")); g.each(function () {
                var l = a(this); if (this.tagName.toLowerCase() === "embed" && l.parent("object").length || l.parent(".fluid-width-video-wrapper").length) { return } var h = (this.tagName.toLowerCase() === "object" || (l.attr("height") && !isNaN(parseInt(l.attr("height"), 10)))) ? parseInt(l.attr("height"), 10) : l.height(), i = !isNaN(parseInt(l.attr("width"), 10)) ? parseInt(l.attr("width"), 10) : l.width(), j = h / i;
                if (!l.attr("id")) { var k = "fitvid" + Math.floor(Math.random() * 999999); l.attr("id", k) } l.wrap('<div class="fluid-width-video-wrapper"></div>').parent(".fluid-width-video-wrapper").css("padding-top", (j * 100) + "%"); l.removeAttr("height").removeAttr("width")
            })
        })
    }
})(jQuery);
/*
 * jQuery Superfish Menu Plugin - v1.7.4
 * Copyright (c) 2013 Joel Birch
 *
 * Dual licensed under the MIT and GPL licenses:
 *	http://www.opensource.org/licenses/mit-license.php
 *	http://www.gnu.org/licenses/gpl.html
 */

; (function (e) { "use strict"; var s = function () { var s = { bcClass: "sf-breadcrumb", menuClass: "sf-js-enabled", anchorClass: "sf-with-ul", menuArrowClass: "sf-arrows" }, o = function () { var s = /iPhone|iPad|iPod/i.test(navigator.userAgent); return s && e(window).load(function () { e("body").children().on("click", e.noop) }), s }(), n = function () { var e = document.documentElement.style; return "behavior" in e && "fill" in e && /iemobile/i.test(navigator.userAgent) }(), t = function (e, o) { var n = s.menuClass; o.cssArrows && (n += " " + s.menuArrowClass), e.toggleClass(n) }, i = function (o, n) { return o.find("li." + n.pathClass).slice(0, n.pathLevels).addClass(n.hoverClass + " " + s.bcClass).filter(function () { return e(this).children(n.popUpSelector).hide().show().length }).removeClass(n.pathClass) }, r = function (e) { e.children("a").toggleClass(s.anchorClass) }, a = function (e) { var s = e.css("ms-touch-action"); s = "pan-y" === s ? "auto" : "pan-y", e.css("ms-touch-action", s) }, l = function (s, t) { var i = "li:has(" + t.popUpSelector + ")"; e.fn.hoverIntent && !t.disableHI ? s.hoverIntent(u, p, i) : s.on("mouseenter.superfish", i, u).on("mouseleave.superfish", i, p); var r = "MSPointerDown.superfish"; o || (r += " touchend.superfish"), n && (r += " mousedown.superfish"), s.on("focusin.superfish", "li", u).on("focusout.superfish", "li", p).on(r, "a", t, h) }, h = function (s) { var o = e(this), n = o.siblings(s.data.popUpSelector); n.length > 0 && n.is(":hidden") && (o.one("click.superfish", !1), "MSPointerDown" === s.type ? o.trigger("focus") : e.proxy(u, o.parent("li"))()) }, u = function () { var s = e(this), o = d(s); clearTimeout(o.sfTimer), s.siblings().superfish("hide").end().superfish("show") }, p = function () { var s = e(this), n = d(s); o ? e.proxy(f, s, n)() : (clearTimeout(n.sfTimer), n.sfTimer = setTimeout(e.proxy(f, s, n), n.delay)) }, f = function (s) { s.retainPath = e.inArray(this[0], s.$path) > -1, this.superfish("hide"), this.parents("." + s.hoverClass).length || (s.onIdle.call(c(this)), s.$path.length && e.proxy(u, s.$path)()) }, c = function (e) { return e.closest("." + s.menuClass) }, d = function (e) { return c(e).data("sf-options") }; return { hide: function (s) { if (this.length) { var o = this, n = d(o); if (!n) return this; var t = n.retainPath === !0 ? n.$path : "", i = o.find("li." + n.hoverClass).add(this).not(t).removeClass(n.hoverClass).children(n.popUpSelector), r = n.speedOut; s && (i.show(), r = 0), n.retainPath = !1, n.onBeforeHide.call(i), i.stop(!0, !0).animate(n.animationOut, r, function () { var s = e(this); n.onHide.call(s) }) } return this }, show: function () { var e = d(this); if (!e) return this; var s = this.addClass(e.hoverClass), o = s.children(e.popUpSelector); return e.onBeforeShow.call(o), o.stop(!0, !0).animate(e.animation, e.speed, function () { e.onShow.call(o) }), this }, destroy: function () { return this.each(function () { var o, n = e(this), i = n.data("sf-options"); return i ? (o = n.find(i.popUpSelector).parent("li"), clearTimeout(i.sfTimer), t(n, i), r(o), a(n), n.off(".superfish").off(".hoverIntent"), o.children(i.popUpSelector).attr("style", function (e, s) { return s.replace(/display[^;]+;?/g, "") }), i.$path.removeClass(i.hoverClass + " " + s.bcClass).addClass(i.pathClass), n.find("." + i.hoverClass).removeClass(i.hoverClass), i.onDestroy.call(n), n.removeData("sf-options"), void 0) : !1 }) }, init: function (o) { return this.each(function () { var n = e(this); if (n.data("sf-options")) return !1; var h = e.extend({}, e.fn.superfish.defaults, o), u = n.find(h.popUpSelector).parent("li"); h.$path = i(n, h), n.data("sf-options", h), t(n, h), r(u), a(n), l(n, h), u.not("." + s.bcClass).superfish("hide", !0), h.onInit.call(this) }) } } }(); e.fn.superfish = function (o) { return s[o] ? s[o].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof o && o ? e.error("Method " + o + " does not exist on jQuery.fn.superfish") : s.init.apply(this, arguments) }, e.fn.superfish.defaults = { popUpSelector: "ul,.sf-mega", hoverClass: "sfHover", pathClass: "overrideThisToUse", pathLevels: 1, delay: 800, animation: { opacity: "show" }, animationOut: { opacity: "hide" }, speed: "normal", speedOut: "fast", cssArrows: !0, disableHI: !1, onInit: e.noop, onBeforeShow: e.noop, onShow: e.noop, onBeforeHide: e.noop, onHide: e.noop, onIdle: e.noop, onDestroy: e.noop }, e.fn.extend({ hideSuperfishUl: s.hide, showSuperfishUl: s.show }) })(jQuery);

/**
 * jQuery ScrollTo
 * Copyright (c) 2007-2012 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com
 * Dual licensed under MIT and GPL.
 * @author Ariel Flesler
 * @version 1.4.3
 */

; (function ($) { var h = $.scrollTo = function (a, b, c) { $(window).scrollTo(a, b, c) }; h.defaults = { axis: 'xy', duration: parseFloat($.fn.jquery) >= 1.3 ? 0 : 1, limit: true }; h.window = function (a) { return $(window)._scrollable() }; $.fn._scrollable = function () { return this.map(function () { var a = this, isWin = !a.nodeName || $.inArray(a.nodeName.toLowerCase(), ['iframe', '#document', 'html', 'body']) != -1; if (!isWin) return a; var b = (a.contentWindow || a).document || a.ownerDocument || a; return /webkit/i.test(navigator.userAgent) || b.compatMode == 'BackCompat' ? b.body : b.documentElement }) }; $.fn.scrollTo = function (e, f, g) { if (typeof f == 'object') { g = f; f = 0 } if (typeof g == 'function') g = { onAfter: g }; if (e == 'max') e = 9e9; g = $.extend({}, h.defaults, g); f = f || g.duration; g.queue = g.queue && g.axis.length > 1; if (g.queue) f /= 2; g.offset = both(g.offset); g.over = both(g.over); return this._scrollable().each(function () { if (!e) return; var d = this, $elem = $(d), targ = e, toff, attr = {}, win = $elem.is('html,body'); switch (typeof targ) { case 'number': case 'string': if (/^([+-]=)?\d+(\.\d+)?(px|%)?$/.test(targ)) { targ = both(targ); break } targ = $(targ, this); if (!targ.length) return; case 'object': if (targ.is || targ.style) toff = (targ = $(targ)).offset() } $.each(g.axis.split(''), function (i, a) { var b = a == 'x' ? 'Left' : 'Top', pos = b.toLowerCase(), key = 'scroll' + b, old = d[key], max = h.max(d, a); if (toff) { attr[key] = toff[pos] + (win ? 0 : old - $elem.offset()[pos]); if (g.margin) { attr[key] -= parseInt(targ.css('margin' + b)) || 0; attr[key] -= parseInt(targ.css('border' + b + 'Width')) || 0 } attr[key] += g.offset[pos] || 0; if (g.over[pos]) attr[key] += targ[a == 'x' ? 'width' : 'height']() * g.over[pos] } else { var c = targ[pos]; attr[key] = c.slice && c.slice(-1) == '%' ? parseFloat(c) / 100 * max : c } if (g.limit && /^\d+$/.test(attr[key])) attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max); if (!i && g.queue) { if (old != attr[key]) animate(g.onAfterFirst); delete attr[key] } }); animate(g.onAfter); function animate(a) { $elem.animate(attr, f, g.easing, a && function () { a.call(this, e, g) }) } }).end() }; h.max = function (a, b) { var c = b == 'x' ? 'Width' : 'Height', scroll = 'scroll' + c; if (!$(a).is('html,body')) return a[scroll] - $(a)[c.toLowerCase()](); var d = 'client' + c, html = a.ownerDocument.documentElement, body = a.ownerDocument.body; return Math.max(html[scroll], body[scroll]) - Math.min(html[d], body[d]) }; function both(a) { return typeof a == 'object' ? a : { top: a, left: a } } })(jQuery);
/*
Plugin Name: 	Count To
Written by: 	Matt Huggins - https://github.com/mhuggins/jquery-countTo

*/
(function ($) {
    $.fn.countTo = function (options) {
        options = options || {};

        return $(this).each(function () {
            // set options for current element
            var settings = $.extend({}, $.fn.countTo.defaults, {
                from: $(this).data('from'),
                to: $(this).data('to'),
                speed: $(this).data('speed'),
                refreshInterval: $(this).data('refresh-interval'),
                decimals: $(this).data('decimals')
            }, options);

            // how many times to update the value, and how much to increment the value on each update
            var loops = Math.ceil(settings.speed / settings.refreshInterval),
				increment = (settings.to - settings.from) / loops;

            // references & variables that will change with each update
            var self = this,
				$self = $(this),
				loopCount = 0,
				value = settings.from,
				data = $self.data('countTo') || {};

            $self.data('countTo', data);

            // if an existing interval can be found, clear it first
            if (data.interval) {
                clearInterval(data.interval);
            }
            data.interval = setInterval(updateTimer, settings.refreshInterval);

            // initialize the element with the starting value
            render(value);

            function updateTimer() {
                value += increment;
                loopCount++;

                render(value);

                if (typeof (settings.onUpdate) == 'function') {
                    settings.onUpdate.call(self, value);
                }

                if (loopCount >= loops) {
                    // remove the interval
                    $self.removeData('countTo');
                    clearInterval(data.interval);
                    value = settings.to;

                    if (typeof (settings.onComplete) == 'function') {
                        settings.onComplete.call(self, value);
                    }
                }
            }

            function render(value) {
                var formattedValue = settings.formatter.call(self, value, settings);
                $self.html(formattedValue);
            }
        });
    };

    $.fn.countTo.defaults = {
        from: 0,               // the number the element should start at
        to: 0,                 // the number the element should end at
        speed: 1000,           // how long it should take to count between the target numbers
        refreshInterval: 100,  // how often the element should be updated
        decimals: 0,           // the number of decimal places to show
        formatter: formatter,  // handler for formatting the value before rendering
        onUpdate: null,        // callback method for every time the element is updated
        onComplete: null       // callback method for when the element finishes updating
    };

    function formatter(value, settings) {
        return value.toFixed(settings.decimals);
    }
}(jQuery));

/*! bootstrap-timepicker v0.2.5 
* http://jdewit.github.com/bootstrap-timepicker 
* Copyright (c) 2013 Joris de Wit 
* MIT License 
*/!function (a, b, c) { "use strict"; var d = function (b, c) { this.widget = "", this.$element = a(b), this.defaultTime = c.defaultTime, this.disableFocus = c.disableFocus, this.disableMousewheel = c.disableMousewheel, this.isOpen = c.isOpen, this.minuteStep = c.minuteStep, this.modalBackdrop = c.modalBackdrop, this.orientation = c.orientation, this.secondStep = c.secondStep, this.showInputs = c.showInputs, this.showMeridian = c.showMeridian, this.showSeconds = c.showSeconds, this.template = c.template, this.appendWidgetTo = c.appendWidgetTo, this.showWidgetOnAddonClick = c.showWidgetOnAddonClick, this._init() }; d.prototype = { constructor: d, _init: function () { var b = this; this.showWidgetOnAddonClick && (this.$element.parent().hasClass("input-append") || this.$element.parent().hasClass("input-prepend")) ? (this.$element.parent(".input-append, .input-prepend").find(".add-on").on({ "click.timepicker": a.proxy(this.showWidget, this) }), this.$element.on({ "focus.timepicker": a.proxy(this.highlightUnit, this), "click.timepicker": a.proxy(this.highlightUnit, this), "keydown.timepicker": a.proxy(this.elementKeydown, this), "blur.timepicker": a.proxy(this.blurElement, this), "mousewheel.timepicker DOMMouseScroll.timepicker": a.proxy(this.mousewheel, this) })) : this.template ? this.$element.on({ "focus.timepicker": a.proxy(this.showWidget, this), "click.timepicker": a.proxy(this.showWidget, this), "blur.timepicker": a.proxy(this.blurElement, this), "mousewheel.timepicker DOMMouseScroll.timepicker": a.proxy(this.mousewheel, this) }) : this.$element.on({ "focus.timepicker": a.proxy(this.highlightUnit, this), "click.timepicker": a.proxy(this.highlightUnit, this), "keydown.timepicker": a.proxy(this.elementKeydown, this), "blur.timepicker": a.proxy(this.blurElement, this), "mousewheel.timepicker DOMMouseScroll.timepicker": a.proxy(this.mousewheel, this) }), this.$widget = this.template !== !1 ? a(this.getTemplate()).on("click", a.proxy(this.widgetClick, this)) : !1, this.showInputs && this.$widget !== !1 && this.$widget.find("input").each(function () { a(this).on({ "click.timepicker": function () { a(this).select() }, "keydown.timepicker": a.proxy(b.widgetKeydown, b), "keyup.timepicker": a.proxy(b.widgetKeyup, b) }) }), this.setDefaultTime(this.defaultTime) }, blurElement: function () { this.highlightedUnit = null, this.updateFromElementVal() }, clear: function () { this.hour = "", this.minute = "", this.second = "", this.meridian = "", this.$element.val("") }, decrementHour: function () { if (this.showMeridian) if (1 === this.hour) this.hour = 12; else { if (12 === this.hour) return this.hour--, this.toggleMeridian(); if (0 === this.hour) return this.hour = 11, this.toggleMeridian(); this.hour-- } else this.hour <= 0 ? this.hour = 23 : this.hour-- }, decrementMinute: function (a) { var b; b = a ? this.minute - a : this.minute - this.minuteStep, 0 > b ? (this.decrementHour(), this.minute = b + 60) : this.minute = b }, decrementSecond: function () { var a = this.second - this.secondStep; 0 > a ? (this.decrementMinute(!0), this.second = a + 60) : this.second = a }, elementKeydown: function (a) { switch (a.keyCode) { case 9: case 27: this.updateFromElementVal(); break; case 37: a.preventDefault(), this.highlightPrevUnit(); break; case 38: switch (a.preventDefault(), this.highlightedUnit) { case "hour": this.incrementHour(), this.highlightHour(); break; case "minute": this.incrementMinute(), this.highlightMinute(); break; case "second": this.incrementSecond(), this.highlightSecond(); break; case "meridian": this.toggleMeridian(), this.highlightMeridian() } this.update(); break; case 39: a.preventDefault(), this.highlightNextUnit(); break; case 40: switch (a.preventDefault(), this.highlightedUnit) { case "hour": this.decrementHour(), this.highlightHour(); break; case "minute": this.decrementMinute(), this.highlightMinute(); break; case "second": this.decrementSecond(), this.highlightSecond(); break; case "meridian": this.toggleMeridian(), this.highlightMeridian() } this.update() } }, getCursorPosition: function () { var a = this.$element.get(0); if ("selectionStart" in a) return a.selectionStart; if (c.selection) { a.focus(); var b = c.selection.createRange(), d = c.selection.createRange().text.length; return b.moveStart("character", -a.value.length), b.text.length - d } }, getTemplate: function () { var a, b, c, d, e, f; switch (this.showInputs ? (b = '<input type="text" class="bootstrap-timepicker-hour" maxlength="2"/>', c = '<input type="text" class="bootstrap-timepicker-minute" maxlength="2"/>', d = '<input type="text" class="bootstrap-timepicker-second" maxlength="2"/>', e = '<input type="text" class="bootstrap-timepicker-meridian" maxlength="2"/>') : (b = '<span class="bootstrap-timepicker-hour"></span>', c = '<span class="bootstrap-timepicker-minute"></span>', d = '<span class="bootstrap-timepicker-second"></span>', e = '<span class="bootstrap-timepicker-meridian"></span>'), f = '<table><tr><td><a href="#" data-action="incrementHour"><i class="fa fa-chevron-up"></i></a></td><td class="separator">&nbsp;</td><td><a href="#" data-action="incrementMinute"><i class="fa fa-chevron-up"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="incrementSecond"><i class="fa fa-chevron-up"></i></a></td>' : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="fa fa-chevron-up"></i></a></td>' : "") + "</tr>" + "<tr>" + "<td>" + b + "</td> " + '<td class="separator">:</td>' + "<td>" + c + "</td> " + (this.showSeconds ? '<td class="separator">:</td><td>' + d + "</td>" : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td>' + e + "</td>" : "") + "</tr>" + "<tr>" + '<td><a href="#" data-action="decrementHour"><i class="fa fa-chevron-down"></i></a></td>' + '<td class="separator"></td>' + '<td><a href="#" data-action="decrementMinute"><i class="fa fa-chevron-down"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="decrementSecond"><i class="fa fa-chevron-down"></i></a></td>' : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="toggleMeridian"><i class="fa fa-chevron-down"></i></a></td>' : "") + "</tr>" + "</table>", this.template) { case "modal": a = '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="' + (this.modalBackdrop ? "true" : "false") + '">' + '<div class="modal-header">' + '<a href="#" class="close" data-dismiss="modal">×</a>' + "<h3>Pick a Time</h3>" + "</div>" + '<div class="modal-content">' + f + "</div>" + '<div class="modal-footer">' + '<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>' + "</div>" + "</div>"; break; case "dropdown": a = '<div class="bootstrap-timepicker-widget dropdown-menu">' + f + "</div>" } return a }, getTime: function () { return this.hour || this.minute || this.second ? this.hour + ":" + (1 === this.minute.toString().length ? "0" + this.minute : this.minute) + (this.showSeconds ? ":" + (1 === this.second.toString().length ? "0" + this.second : this.second) : "") + (this.showMeridian ? " " + this.meridian : "") : "" }, hideWidget: function () { this.isOpen !== !1 && (this.$element.trigger({ type: "hide.timepicker", time: { value: this.getTime(), hours: this.hour, minutes: this.minute, seconds: this.second, meridian: this.meridian } }), "modal" === this.template && this.$widget.modal ? this.$widget.modal("hide") : this.$widget.removeClass("open"), a(c).off("mousedown.timepicker, touchend.timepicker"), this.isOpen = !1, this.$widget.detach()) }, highlightUnit: function () { this.position = this.getCursorPosition(), this.position >= 0 && this.position <= 2 ? this.highlightHour() : this.position >= 3 && this.position <= 5 ? this.highlightMinute() : this.position >= 6 && this.position <= 8 ? this.showSeconds ? this.highlightSecond() : this.highlightMeridian() : this.position >= 9 && this.position <= 11 && this.highlightMeridian() }, highlightNextUnit: function () { switch (this.highlightedUnit) { case "hour": this.highlightMinute(); break; case "minute": this.showSeconds ? this.highlightSecond() : this.showMeridian ? this.highlightMeridian() : this.highlightHour(); break; case "second": this.showMeridian ? this.highlightMeridian() : this.highlightHour(); break; case "meridian": this.highlightHour() } }, highlightPrevUnit: function () { switch (this.highlightedUnit) { case "hour": this.showMeridian ? this.highlightMeridian() : this.showSeconds ? this.highlightSecond() : this.highlightMinute(); break; case "minute": this.highlightHour(); break; case "second": this.highlightMinute(); break; case "meridian": this.showSeconds ? this.highlightSecond() : this.highlightMinute() } }, highlightHour: function () { var a = this.$element.get(0), b = this; this.highlightedUnit = "hour", a.setSelectionRange && setTimeout(function () { b.hour < 10 ? a.setSelectionRange(0, 1) : a.setSelectionRange(0, 2) }, 0) }, highlightMinute: function () { var a = this.$element.get(0), b = this; this.highlightedUnit = "minute", a.setSelectionRange && setTimeout(function () { b.hour < 10 ? a.setSelectionRange(2, 4) : a.setSelectionRange(3, 5) }, 0) }, highlightSecond: function () { var a = this.$element.get(0), b = this; this.highlightedUnit = "second", a.setSelectionRange && setTimeout(function () { b.hour < 10 ? a.setSelectionRange(5, 7) : a.setSelectionRange(6, 8) }, 0) }, highlightMeridian: function () { var a = this.$element.get(0), b = this; this.highlightedUnit = "meridian", a.setSelectionRange && (this.showSeconds ? setTimeout(function () { b.hour < 10 ? a.setSelectionRange(8, 10) : a.setSelectionRange(9, 11) }, 0) : setTimeout(function () { b.hour < 10 ? a.setSelectionRange(5, 7) : a.setSelectionRange(6, 8) }, 0)) }, incrementHour: function () { if (this.showMeridian) { if (11 === this.hour) return this.hour++, this.toggleMeridian(); 12 === this.hour && (this.hour = 0) } return 23 === this.hour ? (this.hour = 0, void 0) : (this.hour++, void 0) }, incrementMinute: function (a) { var b; b = a ? this.minute + a : this.minute + this.minuteStep - this.minute % this.minuteStep, b > 59 ? (this.incrementHour(), this.minute = b - 60) : this.minute = b }, incrementSecond: function () { var a = this.second + this.secondStep - this.second % this.secondStep; a > 59 ? (this.incrementMinute(!0), this.second = a - 60) : this.second = a }, mousewheel: function (b) { if (!this.disableMousewheel) { b.preventDefault(), b.stopPropagation(); var c = b.originalEvent.wheelDelta || -b.originalEvent.detail, d = null; switch ("mousewheel" === b.type ? d = -1 * b.originalEvent.wheelDelta : "DOMMouseScroll" === b.type && (d = 40 * b.originalEvent.detail), d && (b.preventDefault(), a(this).scrollTop(d + a(this).scrollTop())), this.highlightedUnit) { case "minute": c > 0 ? this.incrementMinute() : this.decrementMinute(), this.highlightMinute(); break; case "second": c > 0 ? this.incrementSecond() : this.decrementSecond(), this.highlightSecond(); break; case "meridian": this.toggleMeridian(), this.highlightMeridian(); break; default: c > 0 ? this.incrementHour() : this.decrementHour(), this.highlightHour() } return !1 } }, place: function () { if (!this.isInline) { var c = this.$widget.outerWidth(), d = this.$widget.outerHeight(), e = 10, f = a(b).width(), g = a(b).height(), h = a(b).scrollTop(), i = parseInt(this.$element.parents().filter(function () { }).first().css("z-index"), 10) + 10, j = this.component ? this.component.parent().offset() : this.$element.offset(), k = this.component ? this.component.outerHeight(!0) : this.$element.outerHeight(!1), l = this.component ? this.component.outerWidth(!0) : this.$element.outerWidth(!1), m = j.left, n = j.top; this.$widget.removeClass("timepicker-orient-top timepicker-orient-bottom timepicker-orient-right timepicker-orient-left"), "auto" !== this.orientation.x ? (this.picker.addClass("datepicker-orient-" + this.orientation.x), "right" === this.orientation.x && (m -= c - l)) : (this.$widget.addClass("timepicker-orient-left"), j.left < 0 ? m -= j.left - e : j.left + c > f && (m = f - c - e)); var o, p, q = this.orientation.y; "auto" === q && (o = -h + j.top - d, p = h + g - (j.top + k + d), q = Math.max(o, p) === p ? "top" : "bottom"), this.$widget.addClass("timepicker-orient-" + q), "top" === q ? n += k : n -= d + parseInt(this.$widget.css("padding-top"), 10), this.$widget.css({ top: n, left: m, zIndex: i }) } }, remove: function () { a("document").off(".timepicker"), this.$widget && this.$widget.remove(), delete this.$element.data().timepicker }, setDefaultTime: function (a) { if (this.$element.val()) this.updateFromElementVal(); else if ("current" === a) { var b = new Date, c = b.getHours(), d = b.getMinutes(), e = b.getSeconds(), f = "AM"; 0 !== e && (e = Math.ceil(b.getSeconds() / this.secondStep) * this.secondStep, 60 === e && (d += 1, e = 0)), 0 !== d && (d = Math.ceil(b.getMinutes() / this.minuteStep) * this.minuteStep, 60 === d && (c += 1, d = 0)), this.showMeridian && (0 === c ? c = 12 : c >= 12 ? (c > 12 && (c -= 12), f = "PM") : f = "AM"), this.hour = c, this.minute = d, this.second = e, this.meridian = f, this.update() } else a === !1 ? (this.hour = 0, this.minute = 0, this.second = 0, this.meridian = "AM") : this.setTime(a) }, setTime: function (a, b) { if (!a) return this.clear(), void 0; var c, d, e, f, g; "object" == typeof a && a.getMonth ? (d = a.getHours(), e = a.getMinutes(), f = a.getSeconds(), this.showMeridian && (g = "AM", d > 12 && (g = "PM", d %= 12), 12 === d && (g = "PM"))) : (g = null !== a.match(/p/i) ? "PM" : "AM", a = a.replace(/[^0-9\:]/g, ""), c = a.split(":"), d = c[0] ? c[0].toString() : c.toString(), e = c[1] ? c[1].toString() : "", f = c[2] ? c[2].toString() : "", d.length > 4 && (f = d.substr(4, 2)), d.length > 2 && (e = d.substr(2, 2), d = d.substr(0, 2)), e.length > 2 && (f = e.substr(2, 2), e = e.substr(0, 2)), f.length > 2 && (f = f.substr(2, 2)), d = parseInt(d, 10), e = parseInt(e, 10), f = parseInt(f, 10), isNaN(d) && (d = 0), isNaN(e) && (e = 0), isNaN(f) && (f = 0), this.showMeridian ? 1 > d ? d = 1 : d > 12 && (d = 12) : (d >= 24 ? d = 23 : 0 > d && (d = 0), 13 > d && "PM" === g && (d += 12)), 0 > e ? e = 0 : e >= 60 && (e = 59), this.showSeconds && (isNaN(f) ? f = 0 : 0 > f ? f = 0 : f >= 60 && (f = 59))), this.hour = d, this.minute = e, this.second = f, this.meridian = g, this.update(b) }, showWidget: function () { if (!this.isOpen && !this.$element.is(":disabled")) { this.$widget.appendTo(this.appendWidgetTo); var b = this; a(c).on("mousedown.timepicker, touchend.timepicker", function (a) { b.$element.parent().find(a.target).length || b.$widget.is(a.target) || b.$widget.find(a.target).length || b.hideWidget() }), this.$element.trigger({ type: "show.timepicker", time: { value: this.getTime(), hours: this.hour, minutes: this.minute, seconds: this.second, meridian: this.meridian } }), this.place(), this.disableFocus && this.$element.blur(), this.hour || (this.defaultTime ? this.setDefaultTime(this.defaultTime) : this.setTime("0:0:0")), "modal" === this.template && this.$widget.modal ? this.$widget.modal("show").on("hidden", a.proxy(this.hideWidget, this)) : this.isOpen === !1 && this.$widget.addClass("open"), this.isOpen = !0 } }, toggleMeridian: function () { this.meridian = "AM" === this.meridian ? "PM" : "AM" }, update: function (a) { this.updateElement(), a || this.updateWidget(), this.$element.trigger({ type: "changeTime.timepicker", time: { value: this.getTime(), hours: this.hour, minutes: this.minute, seconds: this.second, meridian: this.meridian } }) }, updateElement: function () { this.$element.val(this.getTime()).change() }, updateFromElementVal: function () { this.setTime(this.$element.val()) }, updateWidget: function () { if (this.$widget !== !1) { var a = this.hour, b = 1 === this.minute.toString().length ? "0" + this.minute : this.minute, c = 1 === this.second.toString().length ? "0" + this.second : this.second; this.showInputs ? (this.$widget.find("input.bootstrap-timepicker-hour").val(a), this.$widget.find("input.bootstrap-timepicker-minute").val(b), this.showSeconds && this.$widget.find("input.bootstrap-timepicker-second").val(c), this.showMeridian && this.$widget.find("input.bootstrap-timepicker-meridian").val(this.meridian)) : (this.$widget.find("span.bootstrap-timepicker-hour").text(a), this.$widget.find("span.bootstrap-timepicker-minute").text(b), this.showSeconds && this.$widget.find("span.bootstrap-timepicker-second").text(c), this.showMeridian && this.$widget.find("span.bootstrap-timepicker-meridian").text(this.meridian)) } }, updateFromWidgetInputs: function () { if (this.$widget !== !1) { var a = this.$widget.find("input.bootstrap-timepicker-hour").val() + ":" + this.$widget.find("input.bootstrap-timepicker-minute").val() + (this.showSeconds ? ":" + this.$widget.find("input.bootstrap-timepicker-second").val() : "") + (this.showMeridian ? this.$widget.find("input.bootstrap-timepicker-meridian").val() : ""); this.setTime(a, !0) } }, widgetClick: function (b) { b.stopPropagation(), b.preventDefault(); var c = a(b.target), d = c.closest("a").data("action"); d && this[d](), this.update(), c.is("input") && c.get(0).setSelectionRange(0, 2) }, widgetKeydown: function (b) { var c = a(b.target), d = c.attr("class").replace("bootstrap-timepicker-", ""); switch (b.keyCode) { case 9: if (this.showMeridian && "meridian" === d || this.showSeconds && "second" === d || !this.showMeridian && !this.showSeconds && "minute" === d) return this.hideWidget(); break; case 27: this.hideWidget(); break; case 38: switch (b.preventDefault(), d) { case "hour": this.incrementHour(); break; case "minute": this.incrementMinute(); break; case "second": this.incrementSecond(); break; case "meridian": this.toggleMeridian() } this.setTime(this.getTime()), c.get(0).setSelectionRange(0, 2); break; case 40: switch (b.preventDefault(), d) { case "hour": this.decrementHour(); break; case "minute": this.decrementMinute(); break; case "second": this.decrementSecond(); break; case "meridian": this.toggleMeridian() } this.setTime(this.getTime()), c.get(0).setSelectionRange(0, 2) } }, widgetKeyup: function (a) { (65 === a.keyCode || 77 === a.keyCode || 80 === a.keyCode || 46 === a.keyCode || 8 === a.keyCode || a.keyCode >= 46 && a.keyCode <= 57) && this.updateFromWidgetInputs() } }, a.fn.timepicker = function (b) { var c = Array.apply(null, arguments); return c.shift(), this.each(function () { var e = a(this), f = e.data("timepicker"), g = "object" == typeof b && b; f || e.data("timepicker", f = new d(this, a.extend({}, a.fn.timepicker.defaults, g, a(this).data()))), "string" == typeof b && f[b].apply(f, c) }) }, a.fn.timepicker.defaults = { defaultTime: "current", disableFocus: !1, disableMousewheel: !1, isOpen: !1, minuteStep: 15, modalBackdrop: !1, orientation: { x: "auto", y: "auto" }, secondStep: 15, showSeconds: !1, showInputs: !0, showMeridian: !0, template: "dropdown", appendWidgetTo: "body", showWidgetOnAddonClick: !0 }, a.fn.timepicker.Constructor = d }(jQuery, window, document);

// Bootstrap DatePicker
!function ($) { function UTCDate() { return new Date(Date.UTC.apply(Date, arguments)) } function UTCToday() { var today = new Date(); return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate()) } var Datepicker = function (element, options) { var that = this; this.element = $(element); this.language = options.language || this.element.data('date-language') || "en"; this.language = this.language in dates ? this.language : "en"; this.isRTL = dates[this.language].rtl || false; this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || 'dd/MM/yyyy'); this.isInline = false; this.isInput = this.element.is('input'); this.component = this.element.is('.date') ? this.element.find('.add-on') : false; this.hasInput = this.component && this.element.find('input').length; if (this.component && this.component.length === 0) this.component = false; this._attachEvents(); this.forceParse = true; if ('forceParse' in options) { this.forceParse = options.forceParse } else if ('dateForceParse' in this.element.data()) { this.forceParse = this.element.data('date-force-parse') } this.picker = $(DPGlobal.template).appendTo(this.isInline ? this.element : 'body').on({ click: $.proxy(this.click, this), mousedown: $.proxy(this.mousedown, this) }); if (this.isInline) { this.picker.addClass('datepicker-inline') } else { this.picker.addClass('datepicker-dropdown dropdown-menu') } if (this.isRTL) { this.picker.addClass('datepicker-rtl'); this.picker.find('.prev i, .next i').toggleClass('icon-arrow-left icon-arrow-right') } $(document).on('mousedown', function (e) { if ($(e.target).closest('.datepicker').length === 0) { that.hide() } }); this.autoclose = false; if ('autoclose' in options) { this.autoclose = options.autoclose } else if ('dateAutoclose' in this.element.data()) { this.autoclose = this.element.data('date-autoclose') } this.keyboardNavigation = true; if ('keyboardNavigation' in options) { this.keyboardNavigation = options.keyboardNavigation } else if ('dateKeyboardNavigation' in this.element.data()) { this.keyboardNavigation = this.element.data('date-keyboard-navigation') } this.viewMode = this.startViewMode = 0; switch (options.startView || this.element.data('date-start-view')) { case 2: case 'decade': this.viewMode = this.startViewMode = 2; break; case 1: case 'year': this.viewMode = this.startViewMode = 1; break } this.todayBtn = (options.todayBtn || this.element.data('date-today-btn') || false); this.todayHighlight = (options.todayHighlight || this.element.data('date-today-highlight') || false); this.weekStart = ((options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7); this.weekEnd = ((this.weekStart + 6) % 7); this.startDate = -Infinity; this.endDate = Infinity; this.daysOfWeekDisabled = []; this.setStartDate(options.startDate || this.element.data('date-startdate')); this.setEndDate(options.endDate || this.element.data('date-enddate')); this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled')); this.fillDow(); this.fillMonths(); this.update(); this.showMode(); if (this.isInline) { this.show() } }; Datepicker.prototype = { constructor: Datepicker, _events: [], _attachEvents: function () { this._detachEvents(); if (this.isInput) { this._events = [[this.element, { focus: $.proxy(this.show, this), keyup: $.proxy(this.update, this), keydown: $.proxy(this.keydown, this) }]] } else if (this.component && this.hasInput) { this._events = [[this.element.find('input'), { focus: $.proxy(this.show, this), keyup: $.proxy(this.update, this), keydown: $.proxy(this.keydown, this) }], [this.component, { click: $.proxy(this.show, this) }]] } else if (this.element.is('div')) { this.isInline = true } else { this._events = [[this.element, { click: $.proxy(this.show, this) }]] } for (var i = 0, el, ev; i < this._events.length; i++) { el = this._events[i][0]; ev = this._events[i][1]; el.on(ev) } }, _detachEvents: function () { for (var i = 0, el, ev; i < this._events.length; i++) { el = this._events[i][0]; ev = this._events[i][1]; el.off(ev) } this._events = [] }, show: function (e) { this.picker.show(); this.height = this.component ? this.component.outerHeight() : this.element.outerHeight(); this.update(); this.place(); $(window).on('resize', $.proxy(this.place, this)); if (e) { e.stopPropagation(); e.preventDefault() } this.element.trigger({ type: 'show', date: this.date }) }, hide: function (e) { if (this.isInline) return; this.picker.hide(); $(window).off('resize', this.place); this.viewMode = this.startViewMode; this.showMode(); if (!this.isInput) { $(document).off('mousedown', this.hide) } if (this.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find('input').val())) this.setValue(); this.element.trigger({ type: 'hide', date: this.date }) }, remove: function () { this._detachEvents(); this.picker.remove(); delete this.element.data().datepicker }, getDate: function () { var d = this.getUTCDate(); return new Date(d.getTime() + (d.getTimezoneOffset() * 60000)) }, getUTCDate: function () { return this.date }, setDate: function (d) { this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset() * 60000))) }, setUTCDate: function (d) { this.date = d; this.setValue() }, setValue: function () { var formatted = this.getFormattedDate(); if (!this.isInput) { if (this.component) { this.element.find('input').val(formatted) } this.element.data('date', formatted) } else { this.element.val(formatted) } }, getFormattedDate: function (format) { if (format === undefined) format = this.format; return DPGlobal.formatDate(this.date, format, this.language) }, setStartDate: function (startDate) { this.startDate = startDate || -Infinity; if (this.startDate !== -Infinity) { this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language) } this.update(); this.updateNavArrows() }, setEndDate: function (endDate) { this.endDate = endDate || Infinity; if (this.endDate !== Infinity) { this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language) } this.update(); this.updateNavArrows() }, setDaysOfWeekDisabled: function (daysOfWeekDisabled) { this.daysOfWeekDisabled = daysOfWeekDisabled || []; if (!$.isArray(this.daysOfWeekDisabled)) { this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/) } this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) { return parseInt(d, 10) }); this.update(); this.updateNavArrows() }, place: function () { if (this.isInline) return; var zIndex = parseInt(this.element.parents().filter(function () { return $(this).css('z-index') != 'auto' }).first().css('z-index')) + 10; var offset = this.component ? this.component.offset() : this.element.offset(); var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true); this.picker.css({ top: offset.top + height, left: offset.left, zIndex: zIndex }) }, update: function () { var date, fromArgs = false; if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) { date = arguments[0]; fromArgs = true } else { date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val() } this.date = DPGlobal.parseDate(date, this.format, this.language); if (fromArgs) this.setValue(); var oldViewDate = this.viewDate; if (this.date < this.startDate) { this.viewDate = new Date(this.startDate) } else if (this.date > this.endDate) { this.viewDate = new Date(this.endDate) } else { this.viewDate = new Date(this.date) } if (oldViewDate && oldViewDate.getTime() != this.viewDate.getTime()) { this.element.trigger({ type: 'changeDate', date: this.viewDate }) } this.fill() }, fillDow: function () { var dowCnt = this.weekStart, html = '<tr>'; while (dowCnt < this.weekStart + 7) { html += '<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>' } html += '</tr>'; this.picker.find('.datepicker-days thead').append(html) }, fillMonths: function () { var html = '', i = 0; while (i < 12) { html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>' } this.picker.find('.datepicker-months td').html(html) }, fill: function () { var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(), startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity, startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity, endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity, endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity, currentDate = this.date && this.date.valueOf(), today = new Date(); this.picker.find('.datepicker-days thead th:eq(1)').text(dates[this.language].months[month] + ' ' + year); this.picker.find('tfoot th.today').text(dates[this.language].today).toggle(this.todayBtn !== false); this.updateNavArrows(); this.fillMonths(); var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0), day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth()); prevMonth.setUTCDate(day); prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7); var nextMonth = new Date(prevMonth); nextMonth.setUTCDate(nextMonth.getUTCDate() + 42); nextMonth = nextMonth.valueOf(); var html = []; var clsName; while (prevMonth.valueOf() < nextMonth) { if (prevMonth.getUTCDay() == this.weekStart) { html.push('<tr>') } clsName = ''; if (prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month)) { clsName += ' old' } else if (prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month)) { clsName += ' new' } if (this.todayHighlight && prevMonth.getUTCFullYear() == today.getFullYear() && prevMonth.getUTCMonth() == today.getMonth() && prevMonth.getUTCDate() == today.getDate()) { clsName += ' today' } if (currentDate && prevMonth.valueOf() == currentDate) { clsName += ' active' } if (prevMonth.valueOf() < this.startDate || prevMonth.valueOf() > this.endDate || $.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1) { clsName += ' disabled' } html.push('<td class="day' + clsName + '">' + prevMonth.getUTCDate() + '</td>'); if (prevMonth.getUTCDay() == this.weekEnd) { html.push('</tr>') } prevMonth.setUTCDate(prevMonth.getUTCDate() + 1) } this.picker.find('.datepicker-days tbody').empty().append(html.join('')); var currentYear = this.date && this.date.getUTCFullYear(); var months = this.picker.find('.datepicker-months').find('th:eq(1)').text(year).end().find('span').removeClass('active'); if (currentYear && currentYear == year) { months.eq(this.date.getUTCMonth()).addClass('active') } if (year < startYear || year > endYear) { months.addClass('disabled') } if (year == startYear) { months.slice(0, startMonth).addClass('disabled') } if (year == endYear) { months.slice(endMonth + 1).addClass('disabled') } html = ''; year = parseInt(year / 10, 10) * 10; var yearCont = this.picker.find('.datepicker-years').find('th:eq(1)').text(year + '-' + (year + 9)).end().find('td'); year -= 1; for (var i = -1; i < 11; i++) { html += '<span class="year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>'; year += 1 } yearCont.html(html) }, updateNavArrows: function () { var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(); switch (this.viewMode) { case 0: if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth()) { this.picker.find('.prev').css({ visibility: 'hidden' }) } else { this.picker.find('.prev').css({ visibility: 'visible' }) } if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth()) { this.picker.find('.next').css({ visibility: 'hidden' }) } else { this.picker.find('.next').css({ visibility: 'visible' }) } break; case 1: case 2: if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) { this.picker.find('.prev').css({ visibility: 'hidden' }) } else { this.picker.find('.prev').css({ visibility: 'visible' }) } if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) { this.picker.find('.next').css({ visibility: 'hidden' }) } else { this.picker.find('.next').css({ visibility: 'visible' }) } break } }, click: function (e) { e.stopPropagation(); e.preventDefault(); var target = $(e.target).closest('span, td, th'); if (target.length == 1) { switch (target[0].nodeName.toLowerCase()) { case 'th': switch (target[0].className) { case 'switch': this.showMode(1); break; case 'prev': case 'next': var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1); switch (this.viewMode) { case 0: this.viewDate = this.moveMonth(this.viewDate, dir); break; case 1: case 2: this.viewDate = this.moveYear(this.viewDate, dir); break } this.fill(); break; case 'today': var date = new Date(); date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0); this.showMode(-2); var which = this.todayBtn == 'linked' ? null : 'view'; this._setDate(date, which); break } break; case 'span': if (!target.is('.disabled')) { this.viewDate.setUTCDate(1); if (target.is('.month')) { var month = target.parent().find('span').index(target); this.viewDate.setUTCMonth(month); this.element.trigger({ type: 'changeMonth', date: this.viewDate }) } else { var year = parseInt(target.text(), 10) || 0; this.viewDate.setUTCFullYear(year); this.element.trigger({ type: 'changeYear', date: this.viewDate }) } this.showMode(-1); this.fill() } break; case 'td': if (target.is('.day') && !target.is('.disabled')) { var day = parseInt(target.text(), 10) || 1; var year = this.viewDate.getUTCFullYear(), month = this.viewDate.getUTCMonth(); if (target.is('.old')) { if (month === 0) { month = 11; year -= 1 } else { month -= 1 } } else if (target.is('.new')) { if (month == 11) { month = 0; year += 1 } else { month += 1 } } this._setDate(UTCDate(year, month, day, 0, 0, 0, 0)) } break } } }, _setDate: function (date, which) { if (!which || which == 'date') this.date = date; if (!which || which == 'view') this.viewDate = date; this.fill(); this.setValue(); this.element.trigger({ type: 'changeDate', date: this.date }); var element; if (this.isInput) { element = this.element } else if (this.component) { element = this.element.find('input') } if (element) { element.change(); if (this.autoclose && (!which || which == 'date')) { this.hide() } } }, moveMonth: function (date, dir) { if (!dir) return date; var new_date = new Date(date.valueOf()), day = new_date.getUTCDate(), month = new_date.getUTCMonth(), mag = Math.abs(dir), new_month, test; dir = dir > 0 ? 1 : -1; if (mag == 1) { test = dir == -1 ? function () { return new_date.getUTCMonth() == month } : function () { return new_date.getUTCMonth() != new_month }; new_month = month + dir; new_date.setUTCMonth(new_month); if (new_month < 0 || new_month > 11) new_month = (new_month + 12) % 12 } else { for (var i = 0; i < mag; i++) new_date = this.moveMonth(new_date, dir); new_month = new_date.getUTCMonth(); new_date.setUTCDate(day); test = function () { return new_month != new_date.getUTCMonth() } } while (test()) { new_date.setUTCDate(--day); new_date.setUTCMonth(new_month) } return new_date }, moveYear: function (date, dir) { return this.moveMonth(date, dir * 12) }, dateWithinRange: function (date) { return date >= this.startDate && date <= this.endDate }, keydown: function (e) { if (this.picker.is(':not(:visible)')) { if (e.keyCode == 27) this.show(); return } var dateChanged = false, dir, day, month, newDate, newViewDate; switch (e.keyCode) { case 27: this.hide(); e.preventDefault(); break; case 37: case 39: if (!this.keyboardNavigation) break; dir = e.keyCode == 37 ? -1 : 1; if (e.ctrlKey) { newDate = this.moveYear(this.date, dir); newViewDate = this.moveYear(this.viewDate, dir) } else if (e.shiftKey) { newDate = this.moveMonth(this.date, dir); newViewDate = this.moveMonth(this.viewDate, dir) } else { newDate = new Date(this.date); newDate.setUTCDate(this.date.getUTCDate() + dir); newViewDate = new Date(this.viewDate); newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir) } if (this.dateWithinRange(newDate)) { this.date = newDate; this.viewDate = newViewDate; this.setValue(); this.update(); e.preventDefault(); dateChanged = true } break; case 38: case 40: if (!this.keyboardNavigation) break; dir = e.keyCode == 38 ? -1 : 1; if (e.ctrlKey) { newDate = this.moveYear(this.date, dir); newViewDate = this.moveYear(this.viewDate, dir) } else if (e.shiftKey) { newDate = this.moveMonth(this.date, dir); newViewDate = this.moveMonth(this.viewDate, dir) } else { newDate = new Date(this.date); newDate.setUTCDate(this.date.getUTCDate() + dir * 7); newViewDate = new Date(this.viewDate); newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7) } if (this.dateWithinRange(newDate)) { this.date = newDate; this.viewDate = newViewDate; this.setValue(); this.update(); e.preventDefault(); dateChanged = true } break; case 13: this.hide(); e.preventDefault(); break; case 9: this.hide(); break } if (dateChanged) { this.element.trigger({ type: 'changeDate', date: this.date }); var element; if (this.isInput) { element = this.element } else if (this.component) { element = this.element.find('input') } if (element) { element.change() } } }, showMode: function (dir) { if (dir) { this.viewMode = Math.max(0, Math.min(2, this.viewMode + dir)) } this.picker.find('>div').hide().filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block'); this.updateNavArrows() } }; $.fn.datepicker = function (option) { var args = Array.apply(null, arguments); args.shift(); return this.each(function () { var $this = $(this), data = $this.data('datepicker'), options = typeof option == 'object' && option; if (!data) { $this.data('datepicker', (data = new Datepicker(this, $.extend({}, $.fn.datepicker.defaults, options)))) } if (typeof option == 'string' && typeof data[option] == 'function') { data[option].apply(data, args) } }) }; $.fn.datepicker.defaults = {}; $.fn.datepicker.Constructor = Datepicker; var dates = $.fn.datepicker.dates = { en: { days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], today: "Today" } }; var DPGlobal = { modes: [{ clsName: 'days', navFnc: 'Month', navStep: 1 }, { clsName: 'months', navFnc: 'FullYear', navStep: 1 }, { clsName: 'years', navFnc: 'FullYear', navStep: 10 }], isLeapYear: function (year) { return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) }, getDaysInMonth: function (year, month) { return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month] }, validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g, nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g, parseFormat: function (format) { var separators = format.replace(this.validParts, '\0').split('\0'), parts = format.match(this.validParts); if (!separators || !separators.length || !parts || parts.length === 0) { throw new Error("Invalid date format."); } return { separators: separators, parts: parts } }, parseDate: function (date, format, language) { if (date instanceof Date) return date; if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)) { var part_re = /([\-+]\d+)([dmwy])/, parts = date.match(/([\-+]\d+)([dmwy])/g), part, dir; date = new Date(); for (var i = 0; i < parts.length; i++) { part = part_re.exec(parts[i]); dir = parseInt(part[1]); switch (part[2]) { case 'd': date.setUTCDate(date.getUTCDate() + dir); break; case 'm': date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir); break; case 'w': date.setUTCDate(date.getUTCDate() + dir * 7); break; case 'y': date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir); break } } return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0) } var parts = date && date.match(this.nonpunctuation) || [], date = new Date(), parsed = {}, setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'], setters_map = { yyyy: function (d, v) { return d.setUTCFullYear(v) }, yy: function (d, v) { return d.setUTCFullYear(2000 + v) }, m: function (d, v) { v -= 1; while (v < 0) v += 12; v %= 12; d.setUTCMonth(v); while (d.getUTCMonth() != v) d.setUTCDate(d.getUTCDate() - 1); return d }, d: function (d, v) { return d.setUTCDate(v) } }, val, filtered, part; setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m']; setters_map['dd'] = setters_map['d']; date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0); var fparts = format.parts.slice(); if (parts.length != fparts.length) { fparts = $(fparts).filter(function (i, p) { return $.inArray(p, setters_order) !== -1 }).toArray() } if (parts.length == fparts.length) { for (var i = 0, cnt = fparts.length; i < cnt; i++) { val = parseInt(parts[i], 10); part = fparts[i]; if (isNaN(val)) { switch (part) { case 'MM': filtered = $(dates[language].months).filter(function () { var m = this.slice(0, parts[i].length), p = parts[i].slice(0, m.length); return m == p }); val = $.inArray(filtered[0], dates[language].months) + 1; break; case 'M': filtered = $(dates[language].monthsShort).filter(function () { var m = this.slice(0, parts[i].length), p = parts[i].slice(0, m.length); return m == p }); val = $.inArray(filtered[0], dates[language].monthsShort) + 1; break } } parsed[part] = val } for (var i = 0, s; i < setters_order.length; i++) { s = setters_order[i]; if (s in parsed && !isNaN(parsed[s])) setters_map[s](date, parsed[s]) } } return date }, formatDate: function (date, format, language) { var val = { d: date.getUTCDate(), D: dates[language].daysShort[date.getUTCDay()], DD: dates[language].days[date.getUTCDay()], m: date.getUTCMonth() + 1, M: dates[language].monthsShort[date.getUTCMonth()], MM: dates[language].months[date.getUTCMonth()], yy: date.getUTCFullYear().toString().substring(2), yyyy: date.getUTCFullYear() }; val.dd = (val.d < 10 ? '0' : '') + val.d; val.mm = (val.m < 10 ? '0' : '') + val.m; var date = [], seps = $.extend([], format.separators); for (var i = 0, cnt = format.parts.length; i < cnt; i++) { if (seps.length) date.push(seps.shift()); date.push(val[format.parts[i]]) } return date.join('') }, headTemplate: '<thead>' + '<tr>' + '<th class="prev"><i class="icon-arrow-left"/></th>' + '<th colspan="5" class="switch"></th>' + '<th class="next"><i class="icon-arrow-right"/></th>' + '</tr>' + '</thead>', contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>', footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>' }; DPGlobal.template = '<div class="datepicker">' + '<div class="datepicker-days">' + '<table class=" table-condensed">' + DPGlobal.headTemplate + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-months">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-years">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '</div>'; $.fn.datepicker.DPGlobal = DPGlobal }(window.jQuery);

